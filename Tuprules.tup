CC = g++
ROS_PACKAGE_NAME = pub_sub_demo
ROS_VERSION = kinetic

ROSDIR = ros

TOP = $(TUP_CWD)
ROS_GEN = $(TOP)/external/ros_gen

CFLAGS += -std=c++11
CFLAGS += -O2
CFLAGS += -Wall
CFLAGS += -ggdb

INCLUDES += -I$(TOP)/src
INCLUDES += -I$(TOP)/external/include
INCLUDES += -I$(TOP)/external/lib
INCLUDES += -I$(TOP)/$(ROSDIR)/msg
INCLUDES += -I$(TOP)/$(ROSDIR)/srv
INCLUDES += -I/opt/ros/$(ROS_VERSION)/include

LIBS += -L$(TOP)/external/lib
LIBS += -Wl,-rpath,'$ORIGIN/$(TOP)/external/lib'
LIBS += -Wl,-rpath,'$ORIGIN/$(TOP)/../external/lib'
LIBS += -L/opt/ros/$(ROS_VERSION)/lib
LIBS += -Wl,-rpath,/opt/ros/$(ROS_VERSION)/lib
LIBS += -lroscpp
LIBS += -lxmlrpcpp
LIBS += -lcpp_common
LIBS += -lrosconsole_log4cxx
LIBS += -lrosconsole_backend_interface
LIBS += -lrosconsole
LIBS += -lrostime
LIBS += -lroscpp_serialization
LIBS += -lpthread


# Definitions of rules implemented by Tupfiles:

# Compile position independent object code
!cc = | $(TOP)/<gens> |> ^co CC %f^ $(CC) -fPIC -c %f -o %o $(CFLAGS) $(INCLUDES) |> %B.o

# Link executable binary
!lb = |> ^c LD %o^ $(CC) %f -o %o $(LIBS) |> %d

# Generate ros message/service headers
!gen = |> ^co MSG %f^ PYTHONPATH=/opt/ros/$(ROS_VERSION)/lib/python2.7/dist-packages $(ROS_GEN)/gen_cpp.py -e $(ROS_GEN) -p $(ROS_PACKAGE_NAME) -o $(ROS_PACKAGE_NAME) %f |> $(ROS_PACKAGE_NAME)/%B.h | $(TOP)/<gens>



## In order for external ROS tools like rostopic to work we need to build the messages for python as well, in addition to registering the package. Ignore the next commands if that is not needed.

# Generate python classes from ros messages
!msg = |> ^c MSG %f^ PYTHONPATH=/opt/ros/$(ROS_VERSION)/lib/python2.7/dist-packages $(ROS_GEN)/genmsg_py.py -p $(ROS_PACKAGE_NAME) -o . %f; mv _%B.py r%B.py |> r%B.py

# Generate python classes from ros services
!srv = |> ^c SRV %f^ PYTHONPATH=/opt/ros/$(ROS_VERSION)/lib/python2.7/dist-packages $(ROS_GEN)/gensrv_py.py -p $(ROS_PACKAGE_NAME) -o . %f; mv _%B.py r%B.py |> r%B.py

# Make it possible to register package with ros
!regmsg = |> ^c REGISTER MSG^ `for f in *.msg; do echo "from .r\$(basename "$f" | cut -f 1 -d '.' | tr '\n' ' ')import *"; done > %o` |> __init__.py
!regsrv = |> ^c REGISTER SRV^ `for f in *.srv; do echo "from .r\$(basename "$f" | cut -f 1 -d '.' | tr '\n' ' ')import *"; done > %o` |> __init__.py
